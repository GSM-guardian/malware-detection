import os
import numpy as np

import torch
import torch.nn as nn 

import matplotlib.pyplot as plt

# data load
class Dataset(torch.utils.data.Dataset):
    def __init__(self, data_dir, task, transfrom=None):
        self.data_dir = data_dir
        self.task = task
        self.transpose = transfrom

        data_list = os.listdir(self.data_dir)
        if self.task == 'sequences':
            data_list = [f for f in data_list if f.endswith('txt')]
        elif self.task == 'images':
            data_list = [f for f in data_list if f.endswith('png') | f.endswith('jpg') | f.endswith('jpeg')]

        data_list.sort()
        self.data_list = data_list

    def __len__(self):
        return len(self.data_list)

    def __getitem__(self, index):
        if self.task == 'sequences':
            pass
        elif self.task == 'images':
            img = plt.imread(os.path.join(self.data_dir, self.data_list[index]))

            if img.ndim == 2:
                img = img[:, :, np.newaxis]

            if img.dtype == np.uint8:
                img = img / 255.0

            pass

# ToTensor(): numpy -> tensor
class ToTensor(object):
    def __call__(self, data):
        for key, value in data.items():
            value = value.transpose((2, 0, 1)).astype(np.float32)
            data[key] = torch.from_numpy(value)

        return data
import torch
import torch.nn as nn
import torch.nn.functional as F

class MalConv(nn.Module):
    def __init__(self, input_length=2000000, kernel_size=500):
        super(MalConv, self).__init__()

        self.embed = nn.Embedding(257, 8, padding_idx=0)

        self.conv1 = nn.Conv1d(in_channels=4, out_channels=128, kernel_size=kernel_size, bias=True)
        self.conv2 = nn.Conv1d(in_channels=4, out_channels=128, kernel_size=kernel_size, bias=True)

        self.pool = nn.MaxPool1d(int(input_length/kernel_size))

        self.fc1 = nn.Linear(128, 128)
        self.fc2 = nn.Linear(128, 1)

        self.sig = nn.Sigmoid()

    def forward(self, x):
        x = self.embed(x)
        x = torch.transpose(x,-1,-2)
        
        cnn_value = self.conv1(x.narrow(-2,0,4))
        gating_weight = self.sigmoid(self.con2(x.narrow(-2,4,4)))

        x = cnn_value * gating_weight
        x = self.pool(x)

        x = x.view(-1,128)
        x = self.fc1(x)
        x = self.fc2(x)

        return x